<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码之旅</title>
  <icon>https://www.victorchu.info/icon.png</icon>
  <subtitle>I love Coding !</subtitle>
  <link href="https://www.victorchu.info/atom.xml" rel="self"/>
  
  <link href="https://www.victorchu.info/"/>
  <updated>2025-07-07T02:42:56.678Z</updated>
  <id>https://www.victorchu.info/</id>
  
  <author>
    <name>Victor Chu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rust 智能指针:Pin</title>
    <link href="https://www.victorchu.info/posts/47fee323/"/>
    <id>https://www.victorchu.info/posts/47fee323/</id>
    <published>2025-06-18T02:57:11.000Z</published>
    <updated>2025-07-07T02:42:56.678Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Pin 和 Unpin 标记 trait 搭配使用。固定保证了实现了 &lt;code&gt;!Unpin&lt;/code&gt; trait</summary>
        
      
    
    
    
    <category term="Rust" scheme="https://www.victorchu.info/categories/Rust/"/>
    
    
    <category term="QuickStart" scheme="https://www.victorchu.info/tags/QuickStart/"/>
    
    <category term="Rust" scheme="https://www.victorchu.info/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust Future 实现原理</title>
    <link href="https://www.victorchu.info/posts/f6310143/"/>
    <id>https://www.victorchu.info/posts/f6310143/</id>
    <published>2025-04-30T08:46:17.000Z</published>
    <updated>2025-06-17T13:31:40.633Z</updated>
    
    
    <summary type="html">&lt;p&gt;Rust 既支持了基于系统线程的多线程编程模型，也支持了基于&lt;code&gt;async/await&lt;/code&gt;的异步编程模型。Rust 的async编程有有以下特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Future 在 Rust 中是惰性的&lt;/li&gt;
&lt;li&gt;Async 在 Rust 中使用开销是零&lt;/li&gt;
&lt;li&gt;Rust 没有内置异步调用所必需的运行时，但是社区生态中已经提供了非常优异的运行时实现，例如 tokio和async-std&lt;/li&gt;
&lt;li&gt;运行时同时支持单线程和多线程&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Rust" scheme="https://www.victorchu.info/categories/Rust/"/>
    
    
    <category term="QuickStart" scheme="https://www.victorchu.info/tags/QuickStart/"/>
    
    <category term="Future" scheme="https://www.victorchu.info/tags/Future/"/>
    
  </entry>
  
  <entry>
    <title>发明服务特征</title>
    <link href="https://www.victorchu.info/posts/ac6fa74c/"/>
    <id>https://www.victorchu.info/posts/ac6fa74c/</id>
    <published>2025-04-30T07:36:05.000Z</published>
    <updated>2025-05-07T06:38:19.264Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/tower-rs/tower&quot;&gt;Tower&lt;/a&gt;是一个模块化和可重用组件库，用于构建健壮的网络客户端和服务器。其核心是&lt;a href=&quot;https://docs.rs/tower/latest/tower/trait.Service.html&quot;&gt;Service&lt;/a&gt;特征。Service是一个异步函数，它接受请求并产生响应。然而，其设计的某些方面可能并不明显。与其解释目前Tower中存在的Service特征，让我们通过想象如果你从头开始，你会如何发明它来看看Service背后的动机。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust" scheme="https://www.victorchu.info/categories/Rust/"/>
    
    
    <category term="QuickStart" scheme="https://www.victorchu.info/tags/QuickStart/"/>
    
    <category term="Rust" scheme="https://www.victorchu.info/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>使用 vscode 开发 Rust</title>
    <link href="https://www.victorchu.info/posts/fbdef81e/"/>
    <id>https://www.victorchu.info/posts/fbdef81e/</id>
    <published>2025-04-19T07:38:02.000Z</published>
    <updated>2025-04-22T05:52:55.986Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文将介绍如果基于 vscode 搭建 Rust 开发环境。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust" scheme="https://www.victorchu.info/categories/Rust/"/>
    
    
    <category term="Rust" scheme="https://www.victorchu.info/tags/Rust/"/>
    
    <category term="Tool" scheme="https://www.victorchu.info/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>Rust Struct 字段自引用问题</title>
    <link href="https://www.victorchu.info/posts/bdfdcebb/"/>
    <id>https://www.victorchu.info/posts/bdfdcebb/</id>
    <published>2025-04-11T06:18:50.000Z</published>
    <updated>2025-04-15T10:07:10.273Z</updated>
    
    
    <summary type="html">&lt;p&gt;先来看一段 Java 代码，Application中有version和 logger。logger 依赖了 Version。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Application&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Version version;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Logger logger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        version = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Version&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        logger =  &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Logger&lt;/span&gt;(version);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Application&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        application.logger.log(&lt;span class=&quot;string&quot;&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// console output:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// [version 1] Hello World!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Version&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ver;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;Version&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ver)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.ver = ver;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; String.format(&lt;span class=&quot;string&quot;&gt;&amp;quot;version %d&amp;quot;&lt;/span&gt;,ver);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Logger&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Version version;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(Version version)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.version = version;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String msg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(String.format(&lt;span class=&quot;string&quot;&gt;&amp;quot;[%s] %s&amp;quot;&lt;/span&gt;,version,msg));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;那么问题来了，如何在 Rust 中实现相同的代码？&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Rust" scheme="https://www.victorchu.info/categories/Rust/"/>
    
    
    <category term="QuickStart" scheme="https://www.victorchu.info/tags/QuickStart/"/>
    
    <category term="Rust" scheme="https://www.victorchu.info/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust-生命周期</title>
    <link href="https://www.victorchu.info/posts/671ae328/"/>
    <id>https://www.victorchu.info/posts/671ae328/</id>
    <published>2025-04-01T13:08:34.000Z</published>
    <updated>2025-04-15T10:07:10.272Z</updated>
    
    
    <summary type="html">&lt;p&gt;生命周期，简而言之就是引用的有效作用域。在大多数时候，我们无需手动的声明生命周期，因为编译器可以自动进行推导。当多个生命周期存在，且编译器无法推导出某个引用的生命周期时，就需要我们手动标明生命周期。&lt;/p&gt;
&lt;h1 id=&quot;悬垂指针和生命周期&quot;&gt;悬垂指针和生命周期&lt;/h1&gt;
&lt;p&gt;生命周期的主要作用是避免悬垂引用，它会导致程序引用了本不该引用的数据：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;r&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        r = &amp;amp;x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;    &lt;span class=&quot;comment&quot;&gt;// ^^ borrowed value does not live long enough&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;r: &amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此处 r 就是一个悬垂指针，它引用了提前被释放的变量 x。&lt;/p&gt;
&lt;h1 id=&quot;借用检查&quot;&gt;借用检查&lt;/h1&gt;
&lt;p&gt;为了保证 Rust 的所有权和借用的正确性，Rust 使用了一个借用检查器(Borrow checker)，来检查我们程序的借用正确性：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;r&lt;/span&gt;;                &lt;span class=&quot;comment&quot;&gt;// ---------+-- &amp;#x27;a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;comment&quot;&gt;//          |&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;                     &lt;span class=&quot;comment&quot;&gt;//          |&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;        &lt;span class=&quot;comment&quot;&gt;// -+-- &amp;#x27;b  |&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        r = &amp;amp;x;           &lt;span class=&quot;comment&quot;&gt;//  |       |&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;                     &lt;span class=&quot;comment&quot;&gt;// -+       |&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;comment&quot;&gt;//          |&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;r: &amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, r); &lt;span class=&quot;comment&quot;&gt;//          |&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;                         &lt;span class=&quot;comment&quot;&gt;// ---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;r 变量被赋予了生命周期 &#39;a，x 被赋予了生命周期 &#39;b，从图示上可以明显看出生命周期 &#39;b 比 &#39;a 小很多。在编译期，Rust 会比较两个变量的生命周期，结果发现 r 明明拥有生命周期 &#39;a，但是却引用了一个小得多的生命周期 &#39;b，在这种情况下，编译器会认为我们的程序存在风险，因此拒绝运行。如果想要编译通过，也很简单，只要 &#39;b 比 &#39;a 大就好。总之，x 变量只要比 r 活得久，那么 r 就能随意引用 x 且不会存在危险：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;            &lt;span class=&quot;comment&quot;&gt;// ----------+-- &amp;#x27;b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;comment&quot;&gt;//           |&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;r&lt;/span&gt; = &amp;amp;x;           &lt;span class=&quot;comment&quot;&gt;// --+-- &amp;#x27;a  |&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;comment&quot;&gt;//   |       |&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;r: &amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, r); &lt;span class=&quot;comment&quot;&gt;//   |       |&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;comment&quot;&gt;// --+       |&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;                         &lt;span class=&quot;comment&quot;&gt;// ----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Rust" scheme="https://www.victorchu.info/categories/Rust/"/>
    
    
    <category term="QuickStart" scheme="https://www.victorchu.info/tags/QuickStart/"/>
    
    <category term="Rust" scheme="https://www.victorchu.info/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>TCP-超时重传</title>
    <link href="https://www.victorchu.info/posts/33b8702a/"/>
    <id>https://www.victorchu.info/posts/33b8702a/</id>
    <published>2025-03-28T03:43:10.000Z</published>
    <updated>2025-04-15T10:07:10.269Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;TCP协议是一种面向连接的有状态网络协议。对于发送的每个数据包，一旦TCP堆栈收到特定数据包的ACK，它就认为它已成功传递。&lt;/p&gt;
&lt;p&gt;TCP使用指数退避超时重传一个未确认的数据包，最多tcp_retries2时间（默认为15），每次重传超时在TCP_RTO_MIN（2</summary>
        
      
    
    
    
    <category term="Network" scheme="https://www.victorchu.info/categories/Network/"/>
    
    <category term="TCP" scheme="https://www.victorchu.info/categories/Network/TCP/"/>
    
    
    <category term="TCP" scheme="https://www.victorchu.info/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>系统性能分析-CPU耗时定位</title>
    <link href="https://www.victorchu.info/posts/34494ba4/"/>
    <id>https://www.victorchu.info/posts/34494ba4/</id>
    <published>2025-03-11T11:10:04.000Z</published>
    <updated>2025-03-28T03:21:16.335Z</updated>
    
    
    <summary type="html">&lt;p&gt;上篇博客介绍了 &lt;a href=&quot;/post/c8c5ed6/&quot;&gt;CPU异常分析的工具和方法&lt;/a&gt;。本文将介绍如何定位 CPU 耗时。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.victorchu.info/categories/Linux/"/>
    
    <category term="CPU" scheme="https://www.victorchu.info/categories/Linux/CPU/"/>
    
    
    <category term="Performance" scheme="https://www.victorchu.info/tags/Performance/"/>
    
    <category term="Analysis Tool" scheme="https://www.victorchu.info/tags/Analysis-Tool/"/>
    
  </entry>
  
  <entry>
    <title>Rust-特征</title>
    <link href="https://www.victorchu.info/posts/8c7679f1/"/>
    <id>https://www.victorchu.info/posts/8c7679f1/</id>
    <published>2025-03-11T07:23:17.000Z</published>
    <updated>2025-04-16T08:37:25.662Z</updated>
    
    
    <summary type="html">&lt;p&gt;如果不同的类型具有相同的行为，那么我们就可以定义一个特征，然后为这些类型实现该特征。定义特征是把一些方法组合在一起，目的是定义一个实现某些目标所必需的行为的集合。&lt;/p&gt;
&lt;p&gt;例如，我们现在有文章 Post 和微博 Weibo 两种内容载体，而我们想对相应的内容进行总结，也就是无论是文章内容，还是微博内容，都可以在某个时间点进行总结，那么总结这个行为就是共享的，因此可以用特征来定义：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Summary&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;summarize&lt;/span&gt;(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &lt;span class=&quot;punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;特征只定义行为看起来是什么样的，而不定义行为具体是怎么样的。因此我们需要为实现特征的类型，定义行为具体是怎么样的。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Post&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pub&lt;/span&gt; title: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pub&lt;/span&gt; author: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pub&lt;/span&gt; content: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Summary&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Post&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;summarize&lt;/span&gt;(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &lt;span class=&quot;punctuation&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;format!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;文章&amp;#123;&amp;#125;, 作者是&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.title, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.author)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Rust" scheme="https://www.victorchu.info/categories/Rust/"/>
    
    
    <category term="QuickStart" scheme="https://www.victorchu.info/tags/QuickStart/"/>
    
    <category term="Rust" scheme="https://www.victorchu.info/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust-智能指针-Box</title>
    <link href="https://www.victorchu.info/posts/25a24ade/"/>
    <id>https://www.victorchu.info/posts/25a24ade/</id>
    <published>2025-03-07T09:32:49.000Z</published>
    <updated>2025-04-18T07:52:21.413Z</updated>
    
    
    <summary type="html">&lt;p&gt;指针是一个包含了内存地址的变量，该内存地址引用或者指向了另外的数据。&lt;/p&gt;
&lt;p&gt;在 Rust 中，最常见的指针类型是引用，引用通过 &amp;amp; 符号表示。不同于其它语言，引用在 Rust 中被赋予了更深层次的含义，那就是：借用其它变量的值。引用本身很简单，除了指向某个值外并没有其它的功能，也不会造成性能上的额外损耗，因此是 Rust 中使用最多的指针类型。&lt;/p&gt;
&lt;p&gt;而智能指针则不然，它虽然也号称指针，但是它是一个复杂的家伙：通过比引用更复杂的数据结构，包含比引用更多的信息，例如元数据，当前长度，最大可用长度等。智能指针往往是基于结构体实现，它与我们自定义的结构体最大的区别在于它实现了 Deref 和 Drop 特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deref 可以让智能指针像引用那样工作，这样你就可以写出同时支持智能指针和引用的代码，例如 *T&lt;/li&gt;
&lt;li&gt;Drop 允许你指定智能指针超出作用域后自动执行的代码，例如做一些数据清除等收尾工作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 Box 指针是最简单的智能指针。本文将介绍 Box 指针以及 Deref 和 Drop 特征。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust" scheme="https://www.victorchu.info/categories/Rust/"/>
    
    
    <category term="QuickStart" scheme="https://www.victorchu.info/tags/QuickStart/"/>
    
    <category term="Rust" scheme="https://www.victorchu.info/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Java 操作HDFS小结</title>
    <link href="https://www.victorchu.info/posts/61faea5e/"/>
    <id>https://www.victorchu.info/posts/61faea5e/</id>
    <published>2025-03-05T07:06:09.000Z</published>
    <updated>2025-03-07T06:19:23.102Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文总结了如何使用 Java 客户端操作 HDFS，以及一些注意点。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.victorchu.info/categories/Java/"/>
    
    <category term="HDFS" scheme="https://www.victorchu.info/categories/Java/HDFS/"/>
    
    
    <category term="HDFS" scheme="https://www.victorchu.info/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>Rust 所有权</title>
    <link href="https://www.victorchu.info/posts/36b20547/"/>
    <id>https://www.victorchu.info/posts/36b20547/</id>
    <published>2025-03-03T09:54:30.000Z</published>
    <updated>2025-06-24T09:55:12.841Z</updated>
    
    
    <summary type="html">&lt;p&gt;Rust 为了解决内存安全问题，引入了所有权系统。&lt;/p&gt;
&lt;p&gt;所有的程序都必须和计算机内存打交道，如何从内存中申请空间来存放程序的运行内容，如何在不需要的时候释放这些空间，成了重中之重，也是所有编程语言设计的难点之一。在计算机语言不断演变过程中，出现了三种流派：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;垃圾回收机制(GC)，在程序运行时不断寻找不再使用的内存，典型代表：Java、Go&lt;/li&gt;
&lt;li&gt;手动管理内存的分配和释放, 在程序中，通过函数调用的方式来申请和释放内存，典型代表：C++&lt;/li&gt;
&lt;li&gt;通过所有权来管理内存，编译器在编译时会根据一系列规则进行检查。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rust 选择了第三种，最妙的是，这种检查只发生在编译期，因此对于程序运行期，不会有任何性能上的损失。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust" scheme="https://www.victorchu.info/categories/Rust/"/>
    
    
    <category term="QuickStart" scheme="https://www.victorchu.info/tags/QuickStart/"/>
    
    <category term="Rust" scheme="https://www.victorchu.info/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>系统性能分析-CPU-异常分析</title>
    <link href="https://www.victorchu.info/posts/c8c5ed6/"/>
    <id>https://www.victorchu.info/posts/c8c5ed6/</id>
    <published>2024-09-18T11:40:00.000Z</published>
    <updated>2025-03-11T12:13:15.691Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文记录一些分析 CPU 性能问题的工具&amp;amp;方法。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.victorchu.info/categories/Linux/"/>
    
    <category term="CPU" scheme="https://www.victorchu.info/categories/Linux/CPU/"/>
    
    
    <category term="Performance" scheme="https://www.victorchu.info/tags/Performance/"/>
    
    <category term="Analysis Tool" scheme="https://www.victorchu.info/tags/Analysis-Tool/"/>
    
  </entry>
  
  <entry>
    <title>varint编码</title>
    <link href="https://www.victorchu.info/posts/208a3645/"/>
    <id>https://www.victorchu.info/posts/208a3645/</id>
    <published>2024-06-18T09:30:53.000Z</published>
    <updated>2025-07-07T02:42:56.680Z</updated>
    
    
    <summary type="html">&lt;p&gt;Varint是一种使用一个或多个字节序列化整数的方法，会把整数编码为变长字节。对于32位整型的4个字节数据经过Varint编码后需要1&lt;sub&gt;5个字节，小的数字使用1个byte，大的数字使用5个bytes。64位整型数据编码后占用1&lt;/sub&gt;10个字节。&lt;/p&gt;
&lt;p&gt;在实际场景中小数字的使用率远远多于大数字，因此通过Varint编码对于大部分场景都可以起到很好的压缩效果。&lt;/p&gt;</summary>
    
    
    
    <category term="Encoding" scheme="https://www.victorchu.info/categories/Encoding/"/>
    
    
    <category term="Encoding" scheme="https://www.victorchu.info/tags/Encoding/"/>
    
  </entry>
  
  <entry>
    <title>异步编程模型:Promises vs Futures</title>
    <link href="https://www.victorchu.info/posts/f259f96e/"/>
    <id>https://www.victorchu.info/posts/f259f96e/</id>
    <published>2024-06-17T02:51:15.000Z</published>
    <updated>2025-06-17T12:28:34.050Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文将介绍两种异步编程模型: Promise 和 Future。在计算机科学中，future、promise，是在某些并发编程语言中，指称用于同步程序执行的一种构造。由于某些计算尚未结束，故而需要一个对象来代理这个未知的结果。Future 和 Promise 的设计理念整体上非常相似，但是在不同的语言和框架实现中又存在一定的区别，对此，这里我们基于最广泛的定义进行介绍。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Future：表示异步任务的返回值，表示一个未来值(只读)的占位符，即未来值的消费者。&lt;/li&gt;
&lt;li&gt;Promise：表示异步任务的执行过程，表示一个可写的单赋值容器，即未来值的生产者。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在同时包含 Future 和 Promise 的实现中，一般 Promise 对象会有一个关联的 Future 对象。当 Promise 创建时，Future 对象会自动实例化。当异步任务执行完毕，Promise 在内部设置结果，从而将值绑定至 Future 的占位符中。Future 则提供读取方法。将异步操作分成 Future 和 Promise 两个部分的主要原因是 为了实现读写分离，对外部调用者只读，对内部实现者只写。&lt;/p&gt;</summary>
    
    
    
    <category term="Asynchronous Programming" scheme="https://www.victorchu.info/categories/Asynchronous-Programming/"/>
    
    
    <category term="Future" scheme="https://www.victorchu.info/tags/Future/"/>
    
    <category term="Promise" scheme="https://www.victorchu.info/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Java 反射 问题</title>
    <link href="https://www.victorchu.info/posts/26fa5bc8/"/>
    <id>https://www.victorchu.info/posts/26fa5bc8/</id>
    <published>2024-05-25T04:19:49.000Z</published>
    <updated>2025-07-11T07:45:48.993Z</updated>
    
    
    <summary type="html">&lt;p&gt;在前面介绍 &lt;a href=&quot;/posts/fa358471/&quot;&gt;Java 反射&lt;/a&gt;一文中,提到过反射的弊端，本文基于此将展开介绍一些案例。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.victorchu.info/categories/Java/"/>
    
    <category term="Basic" scheme="https://www.victorchu.info/categories/Java/Basic/"/>
    
    
    <category term="Reflect" scheme="https://www.victorchu.info/tags/Reflect/"/>
    
  </entry>
  
  <entry>
    <title>使用物化视图优化查询:一个实用的、可扩展的解决方案</title>
    <link href="https://www.victorchu.info/posts/4e6dffa/"/>
    <id>https://www.victorchu.info/posts/4e6dffa/</id>
    <published>2024-02-02T09:58:19.000Z</published>
    <updated>2024-06-27T06:53:33.474Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本篇是&lt;a href=&quot;https://courses.cs.washington.edu/courses/cse591d/01sp/opt_views.pdf&quot;&gt;论文&lt;/a&gt;的中文简单翻译&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;物化视图可以大大缩短查询处理时间，特别是对于大型表的聚合查询。要释放这种潜力，查询优化器必须知道如何以及何时利用物化视图。本文提出了一种快速且可扩展的算法，用于确定是否可以从物化视图中计算查询的部分或全部，并描述了如何将其纳入基于转换的优化器中。当前版本处理由selections、joins和group by组成的视图。优化仍然完全基于成本，也就是说，启发式规则不会选择单个“最佳”重写，而是生成多个重写，优化器以正常方式选择最佳替代方案。实验结果表明，该算法在Microsoft SQL Server上实现了良好的性能和可扩展性。优化时间随着视图数的增加而缓慢增加，但即使视图数达到1000次，优化耗时仍然很低。&lt;/p&gt;
&lt;p&gt;关键字:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;物化视图&lt;/li&gt;
&lt;li&gt;视图匹配&lt;/li&gt;
&lt;li&gt;查询优化&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Paper" scheme="https://www.victorchu.info/categories/Paper/"/>
    
    <category term="BigData" scheme="https://www.victorchu.info/categories/Paper/BigData/"/>
    
    
    <category term="Distributed" scheme="https://www.victorchu.info/tags/Distributed/"/>
    
    <category term="BigData" scheme="https://www.victorchu.info/tags/BigData/"/>
    
  </entry>
  
  <entry>
    <title>形式化关系查询语言</title>
    <link href="https://www.victorchu.info/posts/9e3f23c9/"/>
    <id>https://www.victorchu.info/posts/9e3f23c9/</id>
    <published>2023-10-03T08:25:05.000Z</published>
    <updated>2024-06-27T06:53:33.470Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是数据库系统概念第六章节的读书笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查询语言是用户用来从数据库中请求信息的语言。查询语言可以分为过程化和非过程化的。在过程化语言中用户指导系统对数据库执行一系列操作以计算出结果。在非过程化语言中，用户只需要描述所需信息，而不用给出具体过程。&lt;/p&gt;
&lt;p&gt;实际上使用的查询语言既包含过程化的成分，又包含非过程化的成分。在一些&amp;quot;纯&amp;quot;查询语言中，关系代数是过程化的，而元组关系演算和域关系演算是非过程的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在关系模型中，关系指表。表的一行是元组。表中一列是属性。域是属性的取值范围。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="ReadNotes" scheme="https://www.victorchu.info/categories/ReadNotes/"/>
    
    
    <category term="Query" scheme="https://www.victorchu.info/tags/Query/"/>
    
  </entry>
  
  <entry>
    <title>Trino Sql优化:Removing redundant ORDER BY</title>
    <link href="https://www.victorchu.info/posts/422b2ff2/"/>
    <id>https://www.victorchu.info/posts/422b2ff2/</id>
    <published>2023-09-01T06:38:06.000Z</published>
    <updated>2024-06-27T06:53:33.451Z</updated>
    
    
    <summary type="html">&lt;p&gt;一些SQL构造（如ORDER BY）在许多情况下不会影响查询结果，并且会产生影响性能的负面影响(查询中的每个ORDER BY子句都代表一个排序执行计划)。如果用户无意中在没有效果的地方使用ORDER BY，可能会导致严重的性能下降和资源浪费。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sql规范(ISO 9075 Part 2)中说明:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个&lt;code&gt;&amp;lt;query expression&amp;gt;&lt;/code&gt;可以包含一个可选的&lt;code&gt;&amp;lt;order by clause&amp;gt;&lt;/code&gt;。&lt;br&gt;
&lt;code&gt;&amp;lt;query expression&amp;gt;&lt;/code&gt;z中行的顺序仅由&lt;code&gt;&amp;lt;query expression&amp;gt;&lt;/code&gt;直接包含的&lt;code&gt;&amp;lt;order by clause&amp;gt;&lt;/code&gt;指定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;上述规范意味着，查询引擎可以自由地忽略任何不适合上下文的ORDER BY子句。&lt;/p&gt;</summary>
    
    
    
    <category term="Trino" scheme="https://www.victorchu.info/categories/Trino/"/>
    
    
    <category term="Presto" scheme="https://www.victorchu.info/tags/Presto/"/>
    
    <category term="Trino" scheme="https://www.victorchu.info/tags/Trino/"/>
    
  </entry>
  
  <entry>
    <title>Trino源码学习-自定义函数</title>
    <link href="https://www.victorchu.info/posts/8147f19c/"/>
    <id>https://www.victorchu.info/posts/8147f19c/</id>
    <published>2023-08-30T12:20:06.000Z</published>
    <updated>2025-01-14T12:51:01.909Z</updated>
    
    
    <summary type="html">&lt;p&gt;Presto Functions 并不能像 Hive UDF 一样动态加载，需要根据 Function 的类型，实现 Presto 内部定义的不同接口，在 Presto 服务启动时进行注册，然后才能在 SQL 执行时进行调用。&lt;/p&gt;</summary>
    
    
    
    <category term="Trino" scheme="https://www.victorchu.info/categories/Trino/"/>
    
    
    <category term="Presto" scheme="https://www.victorchu.info/tags/Presto/"/>
    
    <category term="Trino" scheme="https://www.victorchu.info/tags/Trino/"/>
    
  </entry>
  
</feed>
